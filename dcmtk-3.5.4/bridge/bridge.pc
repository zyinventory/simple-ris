#include "stdafx.h"
#include <sqlcpr.h>
#include "bridge.h"

static const char BRIDGE[] = "bridge", BRIDGE_GetManageNumber[] = "bridge.getManageNumber", 
  BRIDGE_InsertImageInfoToDB[] = "bridge.insertImageInfoToDB", 
  BRIDGE_GetWorklistFromDB[] = "bridge.GetWorklistFromDB";
static const char *ErrorModuleName = NULL;
static char ErrorMessage[1024];
static size_t bufferSize = 1023;
static size_t messageLength = 0;

static bool connected = false;

EXEC SQL BEGIN DECLARE SECTION;
const unsigned char connection[] = "dicom/dicom";

// ---------StoreSCP-----------
char oldStudyUid[65] = "";
char imageManageNumber[15];
int dateNumber;

//dataset begin
char paramHddRoot[65];
char paramPath[257];
char paramImgManageNum[15];
int paramFileDate, paramFileTime, paramInsertDate, paramInsertTime;
__int64 paramFileSize;
char paramTransferSyntaxUid[65];
char paramSopClaUid[65];
char paramSopInsUid[65];
int paramStuDat;
int paramSerDat;
int paramStuTim;
int paramSerTim;
char paramAccNum[17];
char paramSeriesModality[17];
char paramStudyModality[65];
char paramManufacturer[65];
char paramInstNam[65];
char paramRefPhyNam[65];
char paramStationName[17];
char paramStuDes[65];
char paramSerDes[65];
char paramInstDepartName[65];
char paramPhyRecNam[65];
char paramPerformPhyName[65];
char paramPhyReadStuName[65];
char paramOperateName[65];
char paramManufactModNam[65];
char paramPatNam[65];
char paramPatNamKan[65];
char paramPatNamKat[65];
char paramPatId[65];
int paramPatBirDat;
char paramPatSex[17];
char paramPatAge[5];
char paramPatSiz[17];
char paramPatWei[17];
char paramContBolus[65];
char paramBodParExam[17];
char paramProtocolNam[65];
char paramPatPos[17];
char paramViewPos[17];
char paramStuInsUid[65];
char paramSerInsUid[65];
char paramStuId[17];
char paramSerNum[13];
char paramImaNum[13];
char paramReqPhysician[65];
char paramReqService[65];
//dataset end
int packageId;

// ---------WLM Condition-----------
const char *pWorklistStatement;

#ifndef __BRIDGE_DEFINE

#define DIC_UI_LEN		64
#define DIC_AE_LEN		16
#define DIC_SH_LEN		16
#define DIC_PN_LEN		64
#define DIC_LO_LEN		64
#define DIC_CS_LEN		16
#define DIC_AS_LEN		4
#define DIC_DA_LEN		8
#define DIC_TM_LEN		16
#define DIC_DS_LEN		16

typedef struct tagWlmCondition
{
  const char *pScheduleStationAE;
  const char *pModality;
  const char *pLowerScheduleDate;
  const char *pUpperScheduleDate;
} WlmCondition, *PWlmCondition;	

typedef struct tagWorklistRecord
{
  char ScheduledStationAETitle[DIC_AE_LEN + 1];
  char SchdldProcStepStartDate[DIC_DA_LEN + 1];
  char SchdldProcStepStartTime[DIC_TM_LEN + 1];
  char Modality[DIC_CS_LEN + 1];
  char SchdldProcStepDescription[DIC_LO_LEN + 1];
  char SchdldProcStepLocation[DIC_SH_LEN + 1];
  char SchdldProcStepID[DIC_SH_LEN + 1];
  char RequestedProcedureID[DIC_SH_LEN + 1];
  char RequestedProcedureDescription[DIC_LO_LEN + 1];
  char StudyInstanceUID[DIC_UI_LEN + 1];
  char AccessionNumber[DIC_SH_LEN + 1];
  char RequestingPhysician[DIC_PN_LEN + 1];
  char AdmissionID[DIC_LO_LEN + 1];
  char PatientsNameEn[DIC_PN_LEN + 1];
  char PatientsNameCh[DIC_PN_LEN + 1];
  char PatientID[DIC_LO_LEN + 1];
  char PatientsBirthDate[DIC_DA_LEN + 1];
  char PatientsSex[DIC_CS_LEN + 1];
  char PatientsWeight[DIC_DS_LEN + 1];
  char AdmittingDiagnosesDescription[DIC_LO_LEN + 1];
  char PatientsAge[DIC_AS_LEN + 1];
  int SupportChinese;
  int DicomPersonName;
} WorklistRecord, *PWorklistRecord;

typedef struct tagIndicatorWorklistRecord
{
  short ScheduledStationAETitle;
  short SchdldProcStepStartDate;
  short SchdldProcStepStartTime;
  short Modality;
  short SchdldProcStepDescription;
  short SchdldProcStepLocation;
  short SchdldProcStepID;
  short RequestedProcedureID;
  short RequestedProcedureDescription;
  short StudyInstanceUID;
  short AccessionNumber;
  short RequestingPhysician;
  short AdmissionID;
  short PatientsNameEn;
  short PatientsNameCh;
  short PatientID;
  short PatientsBirthDate;
  short PatientsSex;
  short PatientsWeight;
  short AdmittingDiagnosesDescription;
  short PatientsAge;
  short SupportChinese;
  short DicomPersonName;
} IndicatorWorklistRecord, *PIndicatorWorklistRecord;
#endif

WlmCondition SearchCondition;
WorklistRecord WorklistInBridge;
IndicatorWorklistRecord IndicatorWorklist;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;

const char *GetErrorMessage()
{
  return ErrorMessage;
}

const char *GetErrorModuleName()
{
  return ErrorModuleName;
}

bool SqlError( const char* moduleName )
{
  ErrorModuleName = moduleName;
  if(sqlca.sqlcode < 0)
  {
	sqlglm(reinterpret_cast<unsigned char *>(ErrorMessage), &bufferSize, &messageLength);
	ErrorMessage[messageLength] = '\0';
  }
  else
	strncpy(ErrorMessage, sqlca.sqlerrm.sqlerrmc, sizeof(ErrorMessage));
  EXEC SQL  WHENEVER SQLERROR CONTINUE;
  EXEC SQL ROLLBACK RELEASE;
  connected = false;
  return FALSE;
}

bool rollbackDicomDB()
{
  EXEC SQL ROLLBACK RELEASE;
  connected = false;
  return TRUE;
}

static bool connectDicomDB()
{
  EXEC SQL  WHENEVER SQLERROR DO return( SqlError( BRIDGE ) );
  EXEC SQL CONNECT :connection;
  connected = true;
  return TRUE;
}

bool commitDicomDB()
{
  EXEC SQL COMMIT WORK RELEASE;
  connected = false;
  return TRUE;
}

bool getManageNumber(char * const outImageManageNum, const char * const studyUid, int currentStudyDateNumber, ostream *pLogStream)
{
  if( ! (connected ? true : connectDicomDB()) ) return FALSE;
  EXEC SQL  WHENEVER SQLERROR DO return( SqlError( BRIDGE_GetManageNumber ) );
  if(studyUid)
  {
	// select image manage number from old study level, imange manage number including '_' is invalid.
    strncpy(oldStudyUid, studyUid, sizeof(oldStudyUid));
    EXEC SQL WHENEVER NOT FOUND GOTO NO_STUDY_MANAGE_NUMBER;
    EXEC SQL SELECT STU_IMGMANAGENUM INTO :imageManageNumber FROM STUDYLEVEL WHERE STU_STUINSUID=:oldStudyUid and INSTR(STU_IMGMANAGENUM, '_')=0;
	if(pLogStream) *pLogStream << oldStudyUid << " found old image manage number in studylevel: " << imageManageNumber << endl;
    goto ReturnOutputString;

NO_STUDY_MANAGE_NUMBER:
	// select image manage number from old image level, imange manage number including '_' is invalid.
	EXEC SQL WHENEVER NOT FOUND GOTO NO_IMAGE_MANAGE_NUMBER;
	EXEC SQL PREPARE StmtGetImgMngNum FROM SELECT DISTINCT SUBSTR(PATH,8,14) FROM IMAGELEVEL WHERE STUINSUID=:oldStudyInstanceUID AND INSTR(SUBSTR(PATH,8,14), '_')=0;
	EXEC SQL DECLARE CurImgMngNum CURSOR FOR StmtGetImgMngNum;
	EXEC SQL OPEN CurImgMngNum USING :oldStudyUid;
	EXEC SQL FETCH CurImgMngNum INTO :imageManageNumber;
	EXEC SQL CLOSE CurImgMngNum;
	if(pLogStream) *pLogStream << oldStudyUid << " found old image manage number in imagelevel: " << imageManageNumber << endl;
    goto ReturnOutputString;

NO_IMAGE_MANAGE_NUMBER:
	EXEC SQL CLOSE CurImgMngNum;
  }

  // no old image manage number, create new number.
  EXEC SQL WHENEVER NOT FOUND continue;
  if(currentStudyDateNumber > 0)
  {
    dateNumber = currentStudyDateNumber;
    EXEC SQL SELECT TO_CHAR(:dateNumber) || TO_CHAR(LOCIMGDIRSEQ.NEXTVAL, 'FM000000') INTO :imageManageNumber FROM DUAL;
  }
  else
  {
    EXEC SQL SELECT TO_CHAR(SYSDATE, 'YYYYMMDD') || TO_CHAR(LOCIMGDIRSEQ.NEXTVAL, 'FM000000') INTO :imageManageNumber FROM DUAL;
  }
  if(pLogStream) *pLogStream << oldStudyUid << " create a new image manage number: " << imageManageNumber << endl;

ReturnOutputString:
  strncpy(outImageManageNum, imageManageNumber, sizeof(imageManageNumber));
  return TRUE;
}

bool insertImageInfoToDB(PImgDataset pimg)
{
  if( ! (connected ? true : connectDicomDB()) ) return false;
  EXEC SQL  WHENEVER SQLERROR DO return( SqlError( BRIDGE_InsertImageInfoToDB ) );

  strncpy(paramHddRoot, pimg->pHddRoot, sizeof(paramHddRoot)); paramHddRoot[sizeof(paramHddRoot) - 1] = '\0';
  strncpy(paramPath, pimg->pPath, sizeof(paramPath)); paramPath[sizeof(paramPath) - 1] = '\0';
  strncpy(paramImgManageNum, pimg->pImgManageNum, sizeof(paramImgManageNum)); paramImgManageNum[sizeof(paramImgManageNum) - 1] = '\0';
  paramFileDate = pimg->fileDate;
  paramFileTime = pimg->fileTime;
  paramInsertDate = pimg->insertDate;
  paramInsertTime = pimg->insertTime;
  paramFileSize = pimg->fileSize.QuadPart;
  strncpy(paramTransferSyntaxUid, pimg->pTransferSyntaxUid, sizeof(paramTransferSyntaxUid)); paramTransferSyntaxUid[sizeof(paramTransferSyntaxUid) - 1] = '\0';
  strncpy(paramSopClaUid, pimg->pSopClaUid, sizeof(paramSopClaUid)); paramSopClaUid[sizeof(paramSopClaUid) - 1] = '\0';
  strncpy(paramSopInsUid, pimg->pSopInsUid, sizeof(paramSopInsUid)); paramSopInsUid[sizeof(paramSopInsUid) - 1] = '\0';
  paramStuDat = pimg->stuDat;
  paramSerDat = pimg->serDat;
  paramStuTim = pimg->stuTim;
  paramSerTim = pimg->serTim;
  strncpy(paramAccNum, pimg->pAccNum, sizeof(paramAccNum)); paramAccNum[sizeof(paramAccNum) - 1] = '\0';
  strncpy(paramSeriesModality, pimg->pSeriesModality, sizeof(paramSeriesModality)); paramSeriesModality[sizeof(paramSeriesModality) - 1] = '\0';
  strncpy(paramStudyModality, pimg->pStudyModality, sizeof(paramStudyModality)); paramStudyModality[sizeof(paramStudyModality) - 1] = '\0';
  strncpy(paramManufacturer, pimg->pManufacturer, sizeof(paramManufacturer)); paramManufacturer[sizeof(paramManufacturer) - 1] = '\0';
  strncpy(paramInstNam, pimg->pInstNam, sizeof(paramInstNam)); paramInstNam[sizeof(paramInstNam) - 1] = '\0';
  strncpy(paramRefPhyNam, pimg->pRefPhyNam, sizeof(paramRefPhyNam)); paramRefPhyNam[sizeof(paramRefPhyNam) - 1] = '\0';
  strncpy(paramStationName, pimg->pStationName, sizeof(paramStationName)); paramStationName[sizeof(paramStationName) - 1] = '\0';
  strncpy(paramStuDes, pimg->pStuDes, sizeof(paramStuDes)); paramStuDes[sizeof(paramStuDes) - 1] = '\0';
  strncpy(paramSerDes, pimg->pSerDes, sizeof(paramSerDes)); paramSerDes[sizeof(paramSerDes) - 1] = '\0';
  strncpy(paramInstDepartName, pimg->pInstDepartName, sizeof(paramInstDepartName)); paramInstDepartName[sizeof(paramInstDepartName) - 1] = '\0';
  strncpy(paramPhyRecNam, pimg->pPhyRecNam, sizeof(paramPhyRecNam)); paramPhyRecNam[sizeof(paramPhyRecNam) - 1] = '\0';
  strncpy(paramPerformPhyName, pimg->pPerformPhyName, sizeof(paramPerformPhyName)); paramPerformPhyName[sizeof(paramPerformPhyName) - 1] = '\0';
  strncpy(paramPhyReadStuName, pimg->pPhyReadStuName, sizeof(paramPhyReadStuName)); paramPhyReadStuName[sizeof(paramPhyReadStuName) - 1] = '\0';
  strncpy(paramOperateName, pimg->pOperateName, sizeof(paramOperateName)); paramOperateName[sizeof(paramOperateName) - 1] = '\0';
  strncpy(paramManufactModNam, pimg->pManufactModNam, sizeof(paramManufactModNam)); paramManufactModNam[sizeof(paramManufactModNam) - 1] = '\0';
  strncpy(paramPatNam, pimg->pPatNam, sizeof(paramPatNam)); paramPatNam[sizeof(paramPatNam) - 1] = '\0';
  strncpy(paramPatNamKan, pimg->pPatNamKan, sizeof(paramPatNamKan)); paramPatNamKan[sizeof(paramPatNamKan) - 1] = '\0';
  strncpy(paramPatNamKat, pimg->pPatNamKat, sizeof(paramPatNamKat)); paramPatNamKat[sizeof(paramPatNamKat) - 1] = '\0';
  strncpy(paramPatId, pimg->pPatId, sizeof(paramPatId)); paramPatId[sizeof(paramPatId) - 1] = '\0';
  paramPatBirDat = pimg->patBirDat;
  strncpy(paramPatSex, pimg->pPatSex, sizeof(paramPatSex)); paramPatSex[sizeof(paramPatSex) - 1] = '\0';
  strncpy(paramPatAge, pimg->pPatAge, sizeof(paramPatAge)); paramPatAge[sizeof(paramPatAge) - 1] = '\0';
  strncpy(paramPatSiz, pimg->pPatSiz, sizeof(paramPatSiz)); paramPatSiz[sizeof(paramPatSiz) - 1] = '\0';
  strncpy(paramPatWei, pimg->pPatWei, sizeof(paramPatWei)); paramPatWei[sizeof(paramPatWei) - 1] = '\0';
  strncpy(paramContBolus, pimg->pContBolus, sizeof(paramContBolus)); paramContBolus[sizeof(paramContBolus) - 1] = '\0';
  strncpy(paramBodParExam, pimg->pBodParExam, sizeof(paramBodParExam)); paramBodParExam[sizeof(paramBodParExam) - 1] = '\0';
  strncpy(paramProtocolNam, pimg->pProtocolNam, sizeof(paramProtocolNam)); paramProtocolNam[sizeof(paramProtocolNam) - 1] = '\0';
  strncpy(paramPatPos, pimg->pPatPos, sizeof(paramPatPos)); paramPatPos[sizeof(paramPatPos) - 1] = '\0';
  strncpy(paramViewPos, pimg->pViewPos, sizeof(paramViewPos)); paramViewPos[sizeof(paramViewPos) - 1] = '\0';
  strncpy(paramStuInsUid, pimg->pStuInsUid, sizeof(paramStuInsUid)); paramStuInsUid[sizeof(paramStuInsUid) - 1] = '\0';
  strncpy(paramSerInsUid, pimg->pSerInsUid, sizeof(paramSerInsUid)); paramSerInsUid[sizeof(paramSerInsUid) - 1] = '\0';
  strncpy(paramStuId, pimg->pStuId, sizeof(paramStuId)); paramStuId[sizeof(paramStuId) - 1] = '\0';
  strncpy(paramSerNum, pimg->pSerNum, sizeof(paramSerNum)); paramSerNum[sizeof(paramSerNum) - 1] = '\0';
  strncpy(paramImaNum, pimg->pImaNum, sizeof(paramImaNum)); paramImaNum[sizeof(paramImaNum) - 1] = '\0';
  strncpy(paramReqPhysician, pimg->pReqPhysician, sizeof(paramReqPhysician)); paramReqPhysician[sizeof(paramReqPhysician) - 1] = '\0';
  strncpy(paramReqService, pimg->pReqService, sizeof(paramReqService)); paramReqService[sizeof(paramReqService) - 1] = '\0';

  EXEC SQL EXECUTE BEGIN :packageId := INSERTIMAGE(
    paramHddRoot => :paramHddRoot,
    paramPath => :paramPath,
    paramImgManageNum => :paramImgManageNum,
    paramFileDate => :paramFileDate,
    paramFileTime => :paramFileTime,
    paramInsertDate => :paramInsertDate,
    paramInsertTime => :paramInsertTime,
    paramFileSize => :paramFileSize,
    paramTransferSyntaxUid => :paramTransferSyntaxUid,
    paramSopClaUid => :paramSopClaUid,
    paramSopInsUid => :paramSopInsUid,
    paramStuDat => :paramStuDat,
    paramSerDat => :paramSerDat,
    paramStuTim => :paramStuTim,
    paramSerTim => :paramSerTim,
    paramAccNum => :paramAccNum,
    paramSeriesModality => :paramSeriesModality,
    paramStudyModality => :paramStudyModality,
    paramManufacturer => :paramManufacturer,
    paramInstNam => :paramInstNam,
    paramRefPhyNam => :paramRefPhyNam,
    paramStationName => :paramStationName,
    paramStuDes => :paramStuDes,
    paramSerDes => :paramSerDes,
    paramInstDepartName => :paramInstDepartName,
    paramPhyRecNam => :paramPhyRecNam,
    paramPerformPhyName => :paramPerformPhyName,
    paramPhyReadStuName => :paramPhyReadStuName,
    paramOperateName => :paramOperateName,
    paramManufactModNam => :paramManufactModNam,
    paramPatNam => :paramPatNam,
    paramPatNamKan => :paramPatNamKan,
    paramPatNamKat => :paramPatNamKat,
    paramPatId => :paramPatId,
    paramPatBirDat => :paramPatBirDat,
    paramPatSex => :paramPatSex,
    paramPatAge => :paramPatAge,
    paramPatSiz => :paramPatSiz,
    paramPatWei => :paramPatWei,
    paramContBolus => :paramContBolus,
    paramBodParExam => :paramBodParExam,
    paramProtocolNam => :paramProtocolNam,
    paramPatPos => :paramPatPos,
    paramViewPos => :paramViewPos,
    paramStuInsUid => :paramStuInsUid,
    paramSerInsUid => :paramSerInsUid,
    paramStuId => :paramStuId,
    paramSerNum => :paramSerNum,
    paramImaNum => :paramImaNum,
    paramReqPhysician => :paramReqPhysician,
    paramReqService => :paramReqService
    ); END; END-EXEC;
  return true;
}

// ---------WLM Condition-----------

bool GetWorklistFromDB(FetchWorklistCallback callback, WlmDBInteractionManager *dbim)
{
  if( ! (connected ? true : connectDicomDB()) ) return false;
  EXEC SQL WHENEVER SQLERROR DO return( SqlError( BRIDGE_GetWorklistFromDB ) );
  EXEC SQL WHENEVER NOT FOUND DO break;

  EXEC SQL PREPARE S FROM :pWorklistStatement;
  EXEC SQL DECLARE C CURSOR FOR S;
  EXEC SQL OPEN C USING :SearchCondition;
  while(true)
  {
	EXEC SQL FETCH C INTO :WorklistInBridge INDICATOR :IndicatorWorklist;
	callback(&WorklistInBridge, &IndicatorWorklist, dbim);
  }
  EXEC SQL CLOSE C;
  return true;
}
